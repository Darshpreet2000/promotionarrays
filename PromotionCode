   List<promotions> ON_PURCHASE_VALUE = new ArrayList<>();
    List<promotions> ON_PURCHASE_ITEM = new ArrayList<>();

 
 private void promote() {
        for (int i = 0; i < promotionsList.size(); i++) {
            promotions promote = promotionsList.get(i);
            if (promote.getTarget().equals("ALL")) {
                if (promote.getCondition().equals("ON_PURCHASE_VALUE")) {
                    apply_promotion_service(promote);
                } else if (promote.getCondition().equals("ON_PURCHASE_ITEM")) {
                    apply_promotion_service2(promote);
                }
            }
        }
        List<promotions> concatenated=new ArrayList<promotions>(ON_PURCHASE_VALUE);
        concatenated.addAll(ON_PURCHASE_ITEM);
    }

    private void apply_promotion_service(promotions CURRENTPROMOTION) {
        int getcarttotal;
        CartModel cartModel = new CartModel();
        List<OrderLineItemRestBean> items_list_of_cart = null;
        //I will pass the original cart model here
        BigDecimal orderTotal = cartModel.getOrderTotal();
        getcarttotal = orderTotal.intValue();
        int tempcartTotal = 0;
        List<ProductModel> excludelist = CURRENTPROMOTION.getExcludelist_of_value();
        //Iterating from array of onpurchase value
        for (int i = 0; i < items_list_of_cart.size(); i++) {
            OrderLineItemRestBean currentProduct = items_list_of_cart.get(i);
            //check if this item is excluded or included
            for (int j = 0; j < excludelist.size(); j++) {
                //current item is not in exclude list
                if (!currentProduct.getProductSku().equals(excludelist.get(i).getSku())) {
                    tempcartTotal += currentProduct.getOriginalPrice().intValue() + currentProduct.getQuantity();

                    boolean condition1 = Integer.parseInt(CURRENTPROMOTION.getMin()) <= tempcartTotal;

                    boolean condition2 = Integer.parseInt(CURRENTPROMOTION.getMax()) >= tempcartTotal;

                    boolean condition3 = Integer.parseInt(CURRENTPROMOTION.getFixed()) <= tempcartTotal;
                    if (condition1 && condition2 && condition3) {
                        ON_PURCHASE_VALUE.add(CURRENTPROMOTION);
                    }
                }
            }
        }

    }

    private void apply_promotion_service2(promotions CURRENTPROMOTION) {
        //check if cumulative flag is true (p.promotionRule.cumulative);
        if (CURRENTPROMOTION.isCumulative()) {
            int tempcartitems = 0;
            List<ProductModel> excludelist = CURRENTPROMOTION.getExcludelist_of_value();
            List<OrderLineItemRestBean> items_list_of_cart = null;
            //I will pass the original cart model here
            for (int i = 0; i < items_list_of_cart.size(); i++) {
                OrderLineItemRestBean currentProduct = items_list_of_cart.get(i);
                //check if this item is excluded or included
                for (int j = 0; j < excludelist.size(); j++) {
                    //current item is not in exclude list
                    if (!currentProduct.getProductSku().equals(excludelist.get(i).getSku())) {

                        tempcartitems += currentProduct.getQuantity();
                        boolean condition1 = Integer.parseInt(CURRENTPROMOTION.getMin()) <= tempcartitems;

                        boolean condition2 = Integer.parseInt(CURRENTPROMOTION.getMax()) >= tempcartitems;

                        boolean condition3 = Integer.parseInt(CURRENTPROMOTION.getFixed()) <= tempcartitems;

                        if (condition1 && condition2 && condition3) {
                            ON_PURCHASE_ITEM.add(CURRENTPROMOTION);
                        }
                    }
                }
            }
        }
        else{
            //If cumulative flag is false
           Map<String,Integer> individualItemCount = null;
            List<ProductModel> excludelist = CURRENTPROMOTION.getExcludelist_of_value();
            List<OrderLineItemRestBean> items_list_of_cart = null;
            //I will pass the original cart model here
            for (int i = 0; i < items_list_of_cart.size(); i++) {
                OrderLineItemRestBean currentProduct = items_list_of_cart.get(i);
                //check if this item is excluded or included
                for (int j = 0; j < excludelist.size(); j++) {
                    //current item is not in exclude list
                    if (!currentProduct.getProductSku().equals(excludelist.get(i).getSku())) {
                        individualItemCount.put(currentProduct.getProductSku(),currentProduct.getQuantity());
                        boolean condition1 = Integer.parseInt(CURRENTPROMOTION.getMin()) <= individualItemCount.get(currentProduct.getProductSku());

                        boolean condition2 = Integer.parseInt(CURRENTPROMOTION.getMax()) >= individualItemCount.get(currentProduct.getProductSku());

                        boolean condition3 = Integer.parseInt(CURRENTPROMOTION.getFixed()) <= individualItemCount.get(currentProduct.getProductSku());
                        if (condition1 && condition2 && condition3) {
                            ON_PURCHASE_ITEM.add(CURRENTPROMOTION);
                        }
                    }
                }
            }
       }
    }
