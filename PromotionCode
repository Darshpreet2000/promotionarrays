
 List<promotions> ON_PURCHASE_VALUE = new ArrayList<>();
    List<promotions> ON_PURCHASE_ITEM = new ArrayList<>();
    List<promotions> PURCHASE_VALUE_PROMOTIONS = new ArrayList<>();
    List<promotions> PURCHASE_ITEM_PROMOTIONS = new ArrayList<>();

    private void promote() {
        for (int i = 0; i < promotionsList.size(); i++) {
            promotions promote = promotionsList.get(i);
            if (promote.getTarget().equals("ALL")) {
                if (promote.getCondition().equals("ON_PURCHASE_VALUE")) {
                    ON_PURCHASE_VALUE.add(promote);
                    apply_promotion_service();
                } else if (promote.getCondition().equals("ON_PURCHASE_ITEM")) {
                    ON_PURCHASE_ITEM.add(promote);
                    apply_promotion_service2();
                }
            }
        }
        List<promotions> concatenated = new ArrayList<promotions>(ON_PURCHASE_VALUE);
        concatenated.addAll(ON_PURCHASE_ITEM);

        List<OrderLineItemRestBean> Cart = null;
        //I will pass the original cart model here
        for (int i = 0; i < concatenated.size(); i++) {
            promotions current = concatenated.get(i);
            if (current.getCondition().equals("ON_PURCHASE_VALUE")) {
                if (i == 0) {
                    Cart = resetCart(Cart);
                    Cart = removeAllPromotion(Cart);
                    if (recheckCartTotal(Cart, current)) {
                        //  if received true proceed to c
                        switch (current.getRewardType()) {
                            case "ON_VALUE":
                                for (int j = 0; j < Cart.size(); j++) {
                                    OrderLineItemRestBean el = Cart.get(j);
                                    BigDecimal AmountSaved = current.isDiscountInPercentage() ? (el.getOriginalPrice().precision() * current.getDiscountAmount() / 100) : ((el.getOriginalPrice() * ((((((el.getOriginalPrice() / cartTotal) * current.getDiscountAmount())) * 100) / el.getOriginalPrice()))) / 100);
                                    el.setDiscount(AmountSaved);
                                    LineItemPromotionBean p = null;
                                    p.setPromotionId(current.getPromotionid());
                                    p.setAmountSaved((BigDecimal.valueOf(el.getQuantity()).multiply(AmountSaved)));
                                    p.setName(current.getPromotion());
                                    p.setCoupon(current.getTarget() == "COUPON" ? true : false);
                                    el.getItemPromotions().add(p);
                                    el.setDiscount(el.getDiscount() += current.isDiscountInPercentage() ? current.getDiscountAmount() : (((((el.getOriginalPrice() / cartTotal) * current.getDiscountAmount()) * 100) / el.getOriginalPrice())), 100);
                                }
                                break;
                            case "ON_ITEM":
                                for (int j = 0; j < Cart.size(); j++) {
                                    OrderLineItemRestBean el = Cart.get(j);
                                    if (current.isFreeitem()) {
                                        if (checkForIncludes(current, el) && searchForIteminCart(Cart, el.getProductSku(), current) < current.getItemPromotionQuantity()) {
                                            if (el.getQuantity() <= current.getItemPromotionQuantity()) {
                                                LineItemPromotionBean p = null;
                                                BigDecimal AmountSaved = current.isDiscountInPercentage() ? (el.getOriginalPrice().precision() * current.getDiscountAmount() / 100) : ((el.getOriginalPrice() * ((((((el.getOriginalPrice() / cartTotal) * current.getDiscountAmount())) * 100) / el.getOriginalPrice()))) / 100);
                                                p.setPromotionId(current.getPromotionid());
                                                p.setAmountSaved((BigDecimal.valueOf(el.getQuantity()).multiply(AmountSaved)));
                                                p.setName(current.getPromotion());
                                                el.getItemPromotions().add(p);
                                                el.setDiscount(BigDecimal.valueOf(100));
                                            }
                                        } else {
                                            OrderLineItemRestBean newObj = el;
                                            el.setQuantity(current.getItemPromotionQuantity());
                                            LineItemPromotionBean p = null;
                                            p.setPromotionId(current.getPromotionid());
                                            p.setAmountSaved(BigDecimal.valueOf(el.getOriginalPrice().intValue() * Math.min(el.getQuantity(), current.getItemPromotionQuantity())));
                                            p.setName(current.getPromotion());
                                            el.getItemPromotions().add(p);
                                            el.setDiscount(BigDecimal.valueOf(100));
                                            newObj.setQuantity(newObj.getQuantity() - current.getItemPromotionQuantity());
                                            Cart.add(newObj);
                                        }
                                    } else {
                                        if (checkForIncludes(current, el) && searchForIteminCart(Cart, el.getProductSku(), current) < current.getItemPromotionQuantity()) {
                                            int amountSaved = current.isDiscountInPercentage() ? (el.getOriginalPrice().intValue() * current.getDiscountAmount().intValue() / 100) : current.getDiscountAmount().intValue();
                                            if (el.getQuantity() <= current.getItemPromotionQuantity()) {
                                                LineItemPromotionBean itemtopush = null;
                                                itemtopush.setName(current.getPromotion());
                                                itemtopush.setPromotionId(current.getPromotionid());
                                                itemtopush.setAmountSaved((BigDecimal.valueOf(el.getQuantity()).multiply(BigDecimal.valueOf(amountSaved))));
                                                itemtopush.setCoupon(current.getTarget().equals("COUPON"));
                                                el.getItemPromotions().add(itemtopush);
                                                el.setDiscount(BigDecimal.valueOf(Math.min(el.getDiscount().longValue() + (current.isDiscountInPercentage() ? (current.getDiscountAmount()) : (current.getDiscountAmount() * 100) / el.getOriginalPrice().intValue()), 100)));
                                            } else {
                                                OrderLineItemRestBean newObj = el;
                                                el.setQuantity(current.getItemPromotionQuantity());
                                                LineItemPromotionBean itemtopush = null;
                                                itemtopush.setName(current.getPromotion());
                                                itemtopush.setPromotionId(current.getPromotionid());
                                                itemtopush.setAmountSaved((BigDecimal.valueOf(el.getQuantity()).multiply(BigDecimal.valueOf(amountSaved))));
                                                itemtopush.setCoupon(current.getTarget().equals("COUPON"));
                                                el.getItemPromotions().add(itemtopush);
                                                el.setDiscount(BigDecimal.valueOf(Math.min(el.getDiscount().longValue() + (current.isDiscountInPercentage() ? (current.getDiscountAmount()) : (current.getDiscountAmount() * 100) / el.getOriginalPrice().intValue()), 100)));
                                                newObj.setQuantity(newObj.getQuantity() - current.getItemPromotionQuantity());
                                                Cart.add(newObj);
                                            }
                                        }
                                    }
                                }
                                break;
                            case "FIXED_PRICE":
                                for (int j = 0; j < Cart.size(); j++) {
                                    OrderLineItemRestBean el = Cart.get(j);
                                    if (checkForIncludes(current, el) && searchForIteminCart(Cart, el.getProductSku(), current) < current.getItemPromotionQuantity()) {
                                        if (el.getQuantity() <= current.getItemPromotionQuantity()) {
                                            BigDecimal amountSaved = BigDecimal.valueOf(((el.getOriginalPrice().subtract(BigDecimal.valueOf(current.getDiscountAmount()))).divide(el.getOriginalPrice())).intValue() * 100);
                                            if (el.getQuantity() <= current.getItemPromotionQuantity()) {
                                                LineItemPromotionBean p = null;
                                                p.setPromotionId(current.getPromotionid());
                                                p.setAmountSaved((BigDecimal.valueOf(el.getQuantity()).multiply(amountSaved)));
                                                p.setName(current.getPromotion());
                                                p.setCoupon(current.getTarget().equals("COUPON"));
                                                el.getItemPromotions().add(p);

                                                el.setDiscount(BigDecimal.valueOf(Math.min(el.getDiscount().longValue() + (((el.getOriginalPrice().subtract(BigDecimal.valueOf(current.getDiscountAmount()))).divide(el.getOriginalPrice()).intValue() * 100)), 100)));
                                            } else {
                                                OrderLineItemRestBean newObj = el;
                                                el.setQuantity(current.getItemPromotionQuantity());
                                                LineItemPromotionBean p = null;
                                                p.setPromotionId(current.getPromotionid());

                                                p.setAmountSaved(amountSaved.multiply(BigDecimal.valueOf(Math.min(current.getItemPromotionQuantity(), el.getQuantity()))));
                                                p.setName(current.getPromotion());
                                                p.setCoupon(current.getTarget().equals("COUPON"));
                                                el.getItemPromotions().add(p);
                                                el.setDiscount(new BigDecimal(Math.min(el.getDiscount().add((el.getOriginalPrice().subtract(BigDecimal.valueOf(current.getDiscountAmount()))).divide(el.getOriginalPrice()).multiply(new BigDecimal(100)), new MathContext(4)).intValue(), 100)));
                                                newObj.setQuantity(newObj.getQuantity() - current.getItemPromotionQuantity());

                                                Cart.add(newObj);
                                            }
                                        }

                                        break;
                                    }
                                }
                        }

                    }
                }
            }
        }
    }

    private boolean searchForTheAppliedPromotion(String
                                                         promotion, List<LineItemPromotionBean> itemPromotions) {

        for (int i = 0; i < itemPromotions.size(); i++) {
            if (itemPromotions.get(i).getName().equals(promotion))
                return true;
        }
        return false;
    }

    private int searchForIteminCart(List<OrderLineItemRestBean> cart, String
            sku, promotions current) {
        int count = 0;
        for (int i = 0; i < cart.size(); i++) {
            OrderLineItemRestBean el = cart.get(i);
            if (el.getProductSku().equals(sku) && !el.getItemPromotions().isEmpty() && searchForTheAppliedPromotion(current.getPromotion(), el.getItemPromotions()))
                count += el.getQuantity();
        }
        return count;
    }

    boolean recheckCartTotal(List<OrderLineItemRestBean> Cart, promotions p) {
        int cartTotal = 0;
        for (int i = 0; i < Cart.size(); i++) {
            OrderLineItemRestBean currentItem = Cart.get(i);
            int totalDiscount = 0;
            for (int j = 0; j < currentItem.getItemPromotions().size(); j++) {
                totalDiscount += currentItem.getItemPromotions().get(j).getAmountSaved().intValue();
            }
            cartTotal += (currentItem.getUnitPrice().intValue() * currentItem.getQuantity()) - totalDiscount;
        }
        boolean condition1 = Boolean.parseBoolean(p.getMin()) ? Integer.parseInt(p.getMin()) <= cartTotal : true;

        boolean condition2 = Boolean.parseBoolean(p.getMax()) ? Integer.parseInt(p.getMax()) >= cartTotal : true;

        boolean condition3 = Boolean.parseBoolean(p.getFixed()) ? Integer.parseInt(p.getFixed()) == cartTotal : true;


        return condition1 && condition2 && condition3;
    }

    private List<OrderLineItemRestBean> removeAllPromotion
            (List<OrderLineItemRestBean> cart) {
        List<OrderLineItemRestBean> item = null;
        //I will pass the original cart model here
        for (int i = 0; i < item.size(); i++) {
            OrderLineItemRestBean currentItem = item.get(i);
            if (!currentItem.getItemPromotions().isEmpty()) {
                currentItem.setDiscount(BigDecimal.ZERO);
                currentItem.setUnitPrice(currentItem.getOriginalPrice());
            }
        }
        return item;
    }

    private List<OrderLineItemRestBean> resetCart(List<OrderLineItemRestBean> cart) {
        List<OrderLineItemRestBean> item = null;
        //I will pass the original cart model here
        List<OrderLineItemRestBean> newCart = null;
        HashMap<String, Integer> cartmap = null;
        for (int j = 0; j < item.size(); j++) {
            //I got the current item here
            OrderLineItemRestBean currentItem = item.get(j);
            if (cartmap.containsKey(currentItem.getSkuid())) {
                //Then increase its Quantity
                int Index = newCart.indexOf(currentItem);
                int newItem = newCart.get(Index).getQuantity();
                newCart.get(Index).setQuantity(newItem + currentItem.getQuantity());
            } else {
                //This item was not present earlier
                cartmap.put(currentItem.getSkuid(), currentItem.getQuantity());
                newCart.add(currentItem);
            }
        }
        return item;
    }

    private void apply_promotion_service() {
        int getcarttotal;
        if (!ON_PURCHASE_VALUE.isEmpty()) {
            for (int i = 0; i < ON_PURCHASE_VALUE.size(); i++) {
                int tempCartTotal = 0;
                //Iterating in cart now
                promotions p = ON_PURCHASE_VALUE.get(i);
                List<OrderLineItemRestBean> item = null;
                //I will pass the original cart model here
                for (int j = 0; j < item.size(); j++) {

                    tempCartTotal += checkForIncludes(p, item.get(j)) ? item.get(j).getOriginalPrice().intValue() * item.get(j).getQuantity() : 0;
                    //      item.get(j).getItemPromotions()=[];
                    //        item.get(j).setDiscount(0);

                    boolean condition1 = Boolean.parseBoolean(p.getMin()) ? Integer.parseInt(p.getMin()) <= tempCartTotal : true;

                    boolean condition2 = Boolean.parseBoolean(p.getMax()) ? Integer.parseInt(p.getMax()) >= tempCartTotal : true;

                    boolean condition3 = Boolean.parseBoolean(p.getFixed()) ? Integer.parseInt(p.getFixed()) == tempCartTotal : true;
                    if (condition1 && condition2 && condition3) {
                        PURCHASE_VALUE_PROMOTIONS.add(p);
                    }
                }

            }

        }

    }

    private void apply_promotion_service2() {
        //check if cumulative flag is true (p.promotionRule.cumulative);

        if (!ON_PURCHASE_ITEM.isEmpty()) {
            for (int i = 0; i < ON_PURCHASE_ITEM.size(); i++) {
                int tempCartItems = 0;
                //Iterating in cart now
                promotions p = ON_PURCHASE_ITEM.get(i);
                if (p.isCumulative()) {
                    int tempcartitems = 0;

                    List<OrderLineItemRestBean> item = null;
                    //I will pass the original cart model here
                    for (int j = 0; j < item.size(); j++) {

                        tempCartItems += checkForIncludes(p, item.get(j)) ? item.get(j).getOriginalPrice().intValue() * item.get(j).getQuantity() : 0;
                        //      item.get(j).getItemPromotions()=[];
                        //        item.get(j).setDiscount(0);

                        boolean condition1 = Boolean.parseBoolean(p.getMin()) ? Integer.parseInt(p.getMin()) <= tempCartItems : true;

                        boolean condition2 = Boolean.parseBoolean(p.getMax()) ? Integer.parseInt(p.getMax()) >= tempCartItems : true;

                        boolean condition3 = Boolean.parseBoolean(p.getFixed()) ? Integer.parseInt(p.getFixed()) == tempCartItems : true;
                        if (condition1 && condition2 && condition3) {
                            PURCHASE_ITEM_PROMOTIONS.add(p);
                        }

                    }
                } else {
                    //If cumulative flag is false
                    Map<String, Integer> individualItemCount = null;

                    //I will pass the original cart model here
                    List<OrderLineItemRestBean> item = null;
                    //I will pass the original cart model here
                    for (int j = 0; j < item.size(); j++) {
                        individualItemCount.put(item.get(j).getHsn(), checkForIncludes(p, item.get(j)) ? item.get(j).getOriginalPrice().intValue() * item.get(j).getQuantity() : 0);
                    }
                    for (int j = 0; j < individualItemCount.size(); j++) {
                        boolean condition1 = Boolean.parseBoolean(p.getMin()) ? Integer.parseInt(p.getMin()) <= individualItemCount.get(item.get(j).getHsn()) : true;

                        boolean condition2 = Boolean.parseBoolean(p.getMax()) ? Integer.parseInt(p.getMax()) >= individualItemCount.get(item.get(j).getHsn()) : true;

                        boolean condition3 = Boolean.parseBoolean(p.getFixed()) ? Integer.parseInt(p.getFixed()) == individualItemCount.get(item.get(j).getHsn()) : true;
                        if (condition1 && condition2 && condition3) {
                            PURCHASE_ITEM_PROMOTIONS.add(p);
                        }
                    }
                }
            }
        }
    }

    private boolean checkForIncludes(promotions arr, OrderLineItemRestBean el) {

        boolean inludeflag = ((arr.skuList.isEmpty() || getIndexByProperty(arr.skuList, el.getSkuid(), el.getSkuname()) != -1)
                && (arr.brandList.isEmpty() || getIndexByProperty(arr.brandList, el.getBrandid(), el.getBrandname()) != -1)
                && (arr.categoryList.isEmpty() || getIndexByProperty(arr.categoryList, el.getCategoryid(), el.getCategoryname()) != -1)
                && (arr.tagList.isEmpty() || getIndexByProperty(arr.tagList, el.getTagid(), el.getTagname()) != -1));

        boolean excludeflag = ((arr.eskuList.isEmpty() || getIndexByProperty(arr.eskuList, el.getSkuid(), el.getSkuname()) != -1)
                && (arr.ebrandList.isEmpty() || getIndexByProperty(arr.ebrandList, el.getBrandid(), el.getBrandname()) != -1)
                && (arr.ecategoryList.isEmpty() || getIndexByProperty(arr.ecategoryList, el.getCategoryid(), el.getCategoryname()) != -1)
                && (arr.etagList.isEmpty() || getIndexByProperty(arr.etagList, el.getTagid(), el.getTagname()) != -1));

        return inludeflag && excludeflag;
    }

    private int getIndexByProperty(List<ListModel> current, String id, String name) {
        for (int i = 0; i < current.size(); i++) {
            ListModel currentobj = current.get(i);
            if (currentobj.getId().equals(id) && currentobj.getName().equals(name)) {
                return i;
            }
        }
        return -1;
    }



